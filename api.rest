### Find all users

GET {{API_URL}}/api/users
Authorization: Bearer {{$auth.token("oauth2")}}

### Create user

POST {{API_URL}}/api/users
Content-Type: application/json
Authorization: Bearer {{$auth.token("oauth2")}}

{
  "name": "Test User"
}

### Create user (error: blank name)

POST {{API_URL}}/api/users
Content-Type: application/json
Authorization: Bearer {{$auth.token("oauth2")}}

{
}

### Update user

PUT {{API_URL}}/api/users/1
Content-Type: application/json
Authorization: Bearer {{$auth.token("oauth2")}}

{
  "name": "Test User111"
}

### Delete user

DELETE {{API_URL}}/api/users/1
Authorization: Bearer {{$auth.token("oauth2")}}

### Get course by ID

GET {{API_URL}}/api/courses/1
Authorization: Bearer {{$auth.token("oauth2")}}

### Find all courses

GET {{API_URL}}/api/courses?page=0&size=10
Authorization: Bearer {{$auth.token("oauth2")}}

### Find upcoming courses

GET {{API_URL}}/api/courses?query=startDate=ge=2025-09-01
Authorization: Bearer {{$auth.token("oauth2")}}

### Find courses by name

GET {{API_URL}}/api/courses?query=name=like=Test
Authorization: Bearer {{$auth.token("oauth2")}}

### Create course

POST {{API_URL}}/api/courses
Content-Type: application/json
Authorization: Bearer {{$auth.token("oauth2")}}

{
  "name": "Test Course",
  "categoryId": "IT",
  "startDate": "2025-09-01"
}

### Update course

PUT {{API_URL}}/api/courses/1
Content-Type: application/json
Authorization: Bearer {{$auth.token("oauth2")}}

{
  "name": "Test Course3",
  "startDate": "2025-09-01",
  "createdById": 1,
  "updatedById": 1
}

### Patch course

PATCH {{API_URL}}/api/courses/1
Content-Type: application/json
Authorization: Bearer {{$auth.token("oauth2")}}

{
  "startDate": "2025-09-03"
}

### Delete course

DELETE {{API_URL}}/api/courses/20004
Authorization: Bearer {{$auth.token("oauth2")}}

### Get all enrolments

GET {{API_URL}}/api/enrollments
Authorization: Bearer {{$auth.token("oauth2")}}

### Add course enrollment

POST {{API_URL}}/api/enrollments
Content-Type: application/json
Authorization: Bearer {{$auth.token("oauth2")}}

{
  "id": {
    "courseId": 2,
    "studentId": 2
  },
  "date": "2025-09-01T10:00:00Z"
}

### Delete course

DELETE {{API_URL}}/api/courses/7
Authorization: Bearer {{$auth.token("oauth2")}}

### Create IT category

POST {{API_URL}}/api/categories
Content-Type: application/json
Authorization: Bearer {{$auth.token("oauth2")}}

{
  "id": "IT",
  "name": "Information & Technology"
}

### Create SC category

POST {{API_URL}}/api/categories
Content-Type: application/json
Authorization: Bearer {{$auth.token("oauth2")}}

{
  "id": "SC",
  "name": "Science"
}

### GraphQL - Get course by ID

POST {{API_URL}}/graphql
Content-Type: application/json

{
  "query": """
  query CourseById {
  courseById(id: "1") {
  name
  createdBy {
  id
  name
}
startDate
updatedBy {
  id
  name
}
id
}
}

"""
}

### Audit - Get course revisions

GET {{API_URL}}/api/courses/1/revisions?page=0&size=10
Authorization: Bearer {{$auth.token("oauth2")}}

### Audit - Get specific course revision

GET {{API_URL}}/api/courses/1/revisions/1
Authorization: Bearer {{$auth.token("oauth2")}}

### Audit - Get latest course revision

GET {{API_URL}}/api/courses/1/revisions/latest
Authorization: Bearer {{$auth.token("oauth2")}}

### Audit - Get user revisions

GET {{API_URL}}/api/users/1/revisions?page=0&size=10
Authorization: Bearer {{$auth.token("oauth2")}}

### Audit - Get specific user revision

GET {{API_URL}}/api/users/1/revisions/1
Authorization: Bearer {{$auth.token("oauth2")}}

### Audit - Get latest user revision

GET {{API_URL}}/api/users/1/revisions/latest
Authorization: Bearer {{$auth.token("oauth2")}}

### Get USER access token

POST {{KEYCLOAK_URL}}/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&client_id=private&client_secret={{CLIENT_SECRET}}&username=user@example.com&password={{USER_PASSWORD}}

> {%
    client.global.set("JWT", response.body.access_token);
%}

### Get ADMIN access token

POST {{KEYCLOAK_URL}}/realms/{{KEYCLOAK_REALM}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&client_id=private&client_secret={{CLIENT_SECRET}}&username=admin@example.com&password={{USER_PASSWORD}}

> {%
    client.global.set("JWT", response.body.access_token);
%}